package com.modernjava.streams;
//of() : use of to create a stream from similar type of data
// we have created stream using Stream<Integer> intStream=Arrays.asList(1,2,3,4,5,6).stream()
// this can be replaced with of as below
//Stream<Integer> intStream=Stream.of(1,2,3,4,5,6)

//iterate(): Generate an infinite sequential Ordered stream produced by iterative application of
// the provided UnaryOperator.The seed is the initial element of the iteration
//generate a stream of even numbers and return 10 even numbers
// EX: Stream.iterate(0,i->i+2).limit(10);

//generate() Generate an infinite sequential unordered stream where each element is generated by the provided
//supplier
//generates a stream of random number and return 5 random numbers
//Stream.generate(new Random()::nextInt).limit(5)

import java.util.Random;
import java.util.stream.Stream;

public class StreamFactoryExample {
    public static void main(String[] args) {
        //of
        Stream<Integer> integerStream = Stream.of(1,2,3,4,5,6,7,8,9);
        integerStream.forEach(System.out::println);
        System.out.println("-----------------------------------------");

        //iterate generate a stream of 10 even numbers
        Stream<Integer> stream=Stream.iterate(0,i->i+2).limit(10);
        stream.forEach(System.out::println);
        System.out.println("------------------------------------------");

        //generate 10 random numbers
        Stream<Integer> stream1=Stream.generate(() -> new Random().nextInt()).limit(5);
        //Stream<Integer> stream1=Stream.generate(new Random()::nextInt).limit(5);
        stream1.forEach(System.out::println);
    }
}
